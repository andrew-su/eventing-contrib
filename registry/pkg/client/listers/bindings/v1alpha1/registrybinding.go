/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "knative.dev/eventing-contrib/registry/pkg/apis/bindings/v1alpha1"
)

// RegistryBindingLister helps list RegistryBindings.
type RegistryBindingLister interface {
	// List lists all RegistryBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RegistryBinding, err error)
	// RegistryBindings returns an object that can list and get RegistryBindings.
	RegistryBindings(namespace string) RegistryBindingNamespaceLister
	RegistryBindingListerExpansion
}

// registryBindingLister implements the RegistryBindingLister interface.
type registryBindingLister struct {
	indexer cache.Indexer
}

// NewRegistryBindingLister returns a new RegistryBindingLister.
func NewRegistryBindingLister(indexer cache.Indexer) RegistryBindingLister {
	return &registryBindingLister{indexer: indexer}
}

// List lists all RegistryBindings in the indexer.
func (s *registryBindingLister) List(selector labels.Selector) (ret []*v1alpha1.RegistryBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegistryBinding))
	})
	return ret, err
}

// RegistryBindings returns an object that can list and get RegistryBindings.
func (s *registryBindingLister) RegistryBindings(namespace string) RegistryBindingNamespaceLister {
	return registryBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegistryBindingNamespaceLister helps list and get RegistryBindings.
type RegistryBindingNamespaceLister interface {
	// List lists all RegistryBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RegistryBinding, err error)
	// Get retrieves the RegistryBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RegistryBinding, error)
	RegistryBindingNamespaceListerExpansion
}

// registryBindingNamespaceLister implements the RegistryBindingNamespaceLister
// interface.
type registryBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegistryBindings in the indexer for a given namespace.
func (s registryBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegistryBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegistryBinding))
	})
	return ret, err
}

// Get retrieves the RegistryBinding from the indexer for a given namespace and name.
func (s registryBindingNamespaceLister) Get(name string) (*v1alpha1.RegistryBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("registrybinding"), name)
	}
	return obj.(*v1alpha1.RegistryBinding), nil
}
