/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "knative.dev/eventing-contrib/registry/pkg/apis/sources/v1alpha1"
)

// RegistrySourceLister helps list RegistrySources.
type RegistrySourceLister interface {
	// List lists all RegistrySources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RegistrySource, err error)
	// RegistrySources returns an object that can list and get RegistrySources.
	RegistrySources(namespace string) RegistrySourceNamespaceLister
	RegistrySourceListerExpansion
}

// registrySourceLister implements the RegistrySourceLister interface.
type registrySourceLister struct {
	indexer cache.Indexer
}

// NewRegistrySourceLister returns a new RegistrySourceLister.
func NewRegistrySourceLister(indexer cache.Indexer) RegistrySourceLister {
	return &registrySourceLister{indexer: indexer}
}

// List lists all RegistrySources in the indexer.
func (s *registrySourceLister) List(selector labels.Selector) (ret []*v1alpha1.RegistrySource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegistrySource))
	})
	return ret, err
}

// RegistrySources returns an object that can list and get RegistrySources.
func (s *registrySourceLister) RegistrySources(namespace string) RegistrySourceNamespaceLister {
	return registrySourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegistrySourceNamespaceLister helps list and get RegistrySources.
type RegistrySourceNamespaceLister interface {
	// List lists all RegistrySources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RegistrySource, err error)
	// Get retrieves the RegistrySource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RegistrySource, error)
	RegistrySourceNamespaceListerExpansion
}

// registrySourceNamespaceLister implements the RegistrySourceNamespaceLister
// interface.
type registrySourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegistrySources in the indexer for a given namespace.
func (s registrySourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegistrySource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegistrySource))
	})
	return ret, err
}

// Get retrieves the RegistrySource from the indexer for a given namespace and name.
func (s registrySourceNamespaceLister) Get(name string) (*v1alpha1.RegistrySource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("registrysource"), name)
	}
	return obj.(*v1alpha1.RegistrySource), nil
}
